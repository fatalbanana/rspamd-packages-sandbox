name: Publish package (Debian)

on:
  workflow_call:
    inputs:
      names:
        required: true
        type: string
        description: 'Comma-separated target distro names (e.g., debian-trixie,debian-bookworm)'
      nightly:
        required: false
        type: string
        description: 'Set to any value to enable nightly (unstable) publish logic.'

jobs:
  publish:
    name: 'publish (debian)'
    runs-on: 'ubuntu-24.04'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y debdelta devscripts gnupg reprepro rsync

      - name: Prepare GPG
        shell: bash
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ vars.GPG_KEY_ID }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.gnupg"
          chmod 700 "$HOME/.gnupg"
          # Import private key, handling raw, escaped \n, or base64-encoded formats
          if [[ -z "${GPG_PRIVATE_KEY:-}" ]]; then
            echo "GPG_PRIVATE_KEY is empty or not set" >&2
            exit 1
          fi
          KEY_TMP="$RUNNER_TEMP/privkey.asc"
          rm -f "$KEY_TMP"
          # Try direct content first
          printf '%s\n' "$GPG_PRIVATE_KEY" > "$KEY_TMP"
          if ! grep -q "BEGIN PGP" "$KEY_TMP"; then
            # Try un-escaping literal \n sequences
            printf '%b' "${GPG_PRIVATE_KEY//\\n/$'\n'}" > "$KEY_TMP"
          fi
          if ! grep -q "BEGIN PGP" "$KEY_TMP"; then
            # Try base64 decoding to ASCII-armored key
            echo "$GPG_PRIVATE_KEY" | base64 -d > "$KEY_TMP" 2>/dev/null || true
          fi
          if ! grep -q "BEGIN PGP" "$KEY_TMP"; then
            echo "Failed to reconstruct OpenPGP private key from secret" >&2
            exit 1
          fi
          gpg --batch --import "$KEY_TMP"
          rm -f "$KEY_TMP"
          KEY_FPR=${GPG_KEY_ID}
          if [[ -z "${KEY_FPR}" ]]; then
            KEY_FPR=$(gpg --list-secret-keys --with-colons | awk -F: '/^fpr:/ {print $10; exit}')
          fi
          echo "KEY_FPR=${KEY_FPR}" >> "$GITHUB_ENV"
          # Configure loopback pinentry for non-interactive signing
          {
            echo "use-agent"
            echo "pinentry-mode loopback"
          } >> "$HOME/.gnupg/gpg.conf"
          echo "allow-loopback-pinentry" >> "$HOME/.gnupg/gpg-agent.conf"
          # Restart agent to apply settings and prime with passphrase
          gpg-connect-agent reloadagent /bye
          echo "${GPG_PASSPHRASE}" | gpg --pinentry-mode loopback --passphrase-fd 0 -u "$KEY_FPR" --batch --sign -o /dev/null /dev/null

      - name: Download all debian package artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: packages-debian-*
          path: packages
          merge-multiple: true

      - name: Download all ubuntu package artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: packages-ubuntu-*
          path: packages
          merge-multiple: true


      - name: Build Docker image with reprepro 5.4.7+
        run: |
          docker build -t reprepro-builder -f .github/workflows/Dockerfile.publish-deb .
          docker run --rm reprepro-builder reprepro --version

      - name: Build and sign APT repository in Docker
        shell: bash
        env:
          NIGHTLY: ${{ inputs.nightly }}
          UPLOAD_HOST: ${{ secrets.UPLOAD_HOST }}
          UPLOAD_SUFFIX: ${{ vars.UPLOAD_SUFFIX || 'rspamd.com/dist/' }}
          TARGET_DEB_STABLE: ${{ vars.TARGET_DEB_STABLE || 'apt-stable' }}
          TARGET_DEB_UNSTABLE: ${{ vars.TARGET_DEB_UNSTABLE || 'apt' }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          KEEP_BUILDS: ${{ vars.KEEP_BUILDS || '10' }}
          UPLOAD_HOST_KNOWN_HOSTS: ${{ vars.UPLOAD_HOST_KNOWN_HOSTS }}
          DIST_NAMES: ${{ inputs.names }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          set -x
          set -euo pipefail
          
          # Export GPG keys
          mkdir -p "$RUNNER_TEMP/gpg"
          gpg --batch --yes --armor --export "$KEY_FPR" > "$RUNNER_TEMP/gpg/pubkey.asc"
          
          # Export secret key with passphrase
          echo "$GPG_PASSPHRASE" > "$RUNNER_TEMP/gpg/passphrase.txt"
          gpg --batch --yes --pinentry-mode loopback --passphrase-file "$RUNNER_TEMP/gpg/passphrase.txt" \
            --armor --export-secret-keys "$KEY_FPR" > "$RUNNER_TEMP/gpg/seckey.asc"
          
          # Setup SSH keys
          mkdir -p "$RUNNER_TEMP/ssh"
          chmod 700 "$RUNNER_TEMP/ssh"
          if [[ -n "${NIGHTLY:-}" ]]; then
            echo '${{ secrets.SSH_KEY_DEB_UNSTABLE }}' > "$RUNNER_TEMP/ssh/id_rsa"
            TARGET_PATH="$TARGET_DEB_UNSTABLE"
          else
            echo '${{ secrets.SSH_KEY_DEB_STABLE }}' > "$RUNNER_TEMP/ssh/id_rsa"
            TARGET_PATH="$TARGET_DEB_STABLE"
          fi
          chmod 600 "$RUNNER_TEMP/ssh/id_rsa"
          echo "$UPLOAD_HOST_KNOWN_HOSTS" > "$RUNNER_TEMP/ssh/known_hosts"
          
          # Run the entire build process in Docker
          docker run --rm \
            -v "$GITHUB_WORKSPACE:/workspace" \
            -v "$RUNNER_TEMP/gpg:/gpg:ro" \
            -v "$RUNNER_TEMP/ssh:/ssh:ro" \
            -e "NIGHTLY=${NIGHTLY:-}" \
            -e "UPLOAD_HOST=$UPLOAD_HOST" \
            -e "UPLOAD_SUFFIX=$UPLOAD_SUFFIX" \
            -e "TARGET_PATH=$TARGET_PATH" \
            -e "KEEP_BUILDS=$KEEP_BUILDS" \
            -e "DIST_NAMES=$DIST_NAMES" \
            -e "SSH_USERNAME=$SSH_USERNAME" \
            reprepro-builder \
            bash /workspace/.github/workflows/build-deb-repo.sh
