name: Build packages

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
        description: 'The target OS/distro name (e.g., ubuntu-jammy, centos-7)'
      nightly:
        required: false
        type: string
        description: 'Set to any value to enable nightly build logic.'
      platform:
        required: true
        type: string
        description: 'The target platform (X64 or ARM64)'

    outputs:
      revision:
        description: "Commit hash of rspamd"
        value: ${{ jobs.build.outputs.revision }}

jobs:
  build:
    name: 'build (${{ inputs.name }}/${{ inputs.platform }})'
    runs-on: ${{ inputs.platform == 'ARM64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}

    outputs:
      revision: ${{ steps.save_commit.outputs.revision }}

    steps:
      - name: Set version information for nightly
        if: ${{ inputs.nightly }}
        run: |
          export RSPAMD_VERSION=`date +%Y%m%d.%H.%M`
          export PATCH_VERSION=1

          echo "PATCH_VERSION=${PATCH_VERSION}" >> "$GITHUB_ENV"
          echo "RSPAMD_VERSION=${RSPAMD_VERSION}" >> "$GITHUB_ENV"

      - name: Set version information for release
        if: ${{ ! inputs.nightly }}
        run: |
          export RSPAMD_VERSION=`echo ${{ github.ref_name }} | sed s/^v// | sed 's/\+.*//'`
          export PATCH_VERSION=`echo ${{ github.ref_name }} | cut -d'+' -f2`

          echo "PATCH_VERSION=${PATCH_VERSION}" >> "$GITHUB_ENV"
          echo "RSPAMD_VERSION=${RSPAMD_VERSION}" >> "$GITHUB_ENV"

      - name: Check out rspamd
        uses: actions/checkout@v4
        with:
          repository: rspamd/rspamd
          path: rspamd
          ref: ${{ inputs.nightly && 'master' || env.RSPAMD_VERSION }}

      - name: Save commit hash
        id: save_commit
        run: |
          cd rspamd
          echo "revision=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          export GIT_VERSION=$(git rev-parse --short HEAD)
          echo "GIT_VERSION=${GIT_VERSION}" >> "$GITHUB_ENV"

      - name: Set OS-specific variables
        run: |
          if [[ "${{ inputs.name }}" == ubuntu-* || "${{ inputs.name }}" == debian-* ]]; then
            echo "PKG_TYPE=deb" >> "$GITHUB_ENV"
            export CODENAME=$(echo "${{ inputs.name }}" | cut -d'-' -f2)
            export PACKAGE_VERSION="${PATCH_VERSION}~${GIT_VERSION}~${CODENAME}"
          elif [[ "${{ inputs.name }}" == centos-* ]] ; then
            echo "PKG_TYPE=rpm" >> "$GITHUB_ENV"
            export CODENAME="el$(echo "${{ inputs.name }}" | cut -d'-' -f2)"
            export PACKAGE_VERSION="${PATCH_VERSION}.${CODENAME}"
          else
            echo "Bad inputs.name: ${{ inputs.name }}"
            exit 1
          fi

          echo PACKAGE_VERSION=${PACKAGE_VERSION} >> "$GITHUB_ENV"

      - name: Check out packpack
        uses: actions/checkout@v4
        with:
          repository: packpack/packpack
          path: packpack

      - name: Build packages
        run: |
          export ASAN=0
          export BUILDDIR=${{ github.workspace }}/rspamd/build
          export DEBIAN=0
          export DOCKER_IMAGE=${{ inputs.name }}
          export DOCKER_REPO=ghcr.io/rspamd/rspamd-build-docker
          export LUAJIT=1
          export PRESERVE_ENVVARS=LUAJIT,ASAN
          # Use $RELEASE_VERSION and $RSPAMD_VERSION from $GITHUB_ENV
          export RELEASE=$PACKAGE_VERSION
          export RPM=0
          export VERSION=$RSPAMD_VERSION

          mkdir -p "$BUILDDIR"
          echo "BUILDDIR=${BUILDDIR}" >> "$GITHUB_ENV"

          if [[ "${{ env.PKG_TYPE }}" == "deb" ]]; then
            export DEBIAN=1
          elif [[ "${{ env.PKG_TYPE }}" == "rpm" ]]; then
            export RPM=1
          else
            echo "Bad env.PKG_TYPE: ${{ env.PKG_TYPE }}"
            exit 1
          fi

          cd rspamd
          ../packpack/packpack
          if [ $RPM -eq 1 ]; then
            export ASAN=1
            ../packpack/packpack
          fi

      - name: Collect outputs by distro name
        run: |
          set -euo pipefail
          mkdir -p out/${{ inputs.name }}
          # Primary outputs from packpack live in rspamd/build
          found_any=0
          if [ -d rspamd/build ]; then
            # Copy both files and nested directories (e.g., debs split by arch)
            rsync -a rspamd/build/ out/${{ inputs.name }}/ && found_any=1 || true
          fi
          # Also copy RPM artifacts produced to repo location (for RPM workflows)
          if compgen -G "*.rpm" > /dev/null; then
            cp -f *.rpm out/${{ inputs.name }}/ && found_any=1 || true
          fi
          # Ensure we fail early if nothing was produced
          if [ "$found_any" -eq 0 ]; then
            echo "No build artifacts found for ${{ inputs.name }}" >&2
            exit 1
          fi

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ inputs.name }}-${{ inputs.platform }}
          path: out
          if-no-files-found: error
          retention-days: 1
          compression-level: 0
